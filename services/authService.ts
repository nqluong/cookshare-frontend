import { API_CONFIG } from '../config/api.config';
import { LoginRequest, RegisterRequest, ForgotPasswordRequest, ChangePasswordRequest } from '../types/auth';
import { Platform } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import * as Cookies from 'expo-cookies';

export const API_BASE_URL = API_CONFIG.BASE_URL;


class AuthService {
  constructor() {
    console.log(`AuthService initialized for ${Platform.OS}`);
    console.log(` API Base URL: ${API_BASE_URL}`);
  }

  async login(credentials: LoginRequest): Promise<string> {
    try {
      console.log('Attempting login to:', `${API_BASE_URL}/auth/login`);

      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 seconds timeout

      const response = await fetch(`${API_BASE_URL}/auth/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(credentials),
        credentials: 'include', // Quan tr·ªçng: ƒë·ªÉ nh·∫≠n cookies t·ª´ server
        signal: controller.signal,
      });

      clearTimeout(timeoutId);

      console.log('Login response status:', response.status);

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(errorText || 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i');
      }

      // L·∫•y response data thay v√¨ ch·ªâ text
      const responseData = await response.json();
      console.log('Login successful, received data:', responseData);

      // Log access token
      const accessToken = responseData.accessToken || responseData.access_token;
      console.log('üîë Access Token:', accessToken);

      // Tr√≠ch xu·∫•t cookies t·ª´ response headers v√† l∆∞u manually cho iOS
      const setCookieHeader = response.headers.get('set-cookie');
      if (setCookieHeader) {
        console.log('üìù Saving cookies manually for iOS:', setCookieHeader);
        await this.parseAndSaveCookies(setCookieHeader);
      }

      return accessToken;
    } catch (error: any) {
      console.error('Login error:', error);
      if (error.name === 'AbortError') {
        throw new Error('Timeout - Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server');
      }
      throw error;
    }
  }

  async register(userData: RegisterRequest): Promise<string> {
    try {
      console.log('Attempting register to:', `${API_BASE_URL}/auth/register`);

      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 seconds timeout

      const response = await fetch(`${API_BASE_URL}/auth/register`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(userData),
        credentials: 'include', // ƒê·ªÉ nh·∫≠n cookies n·∫øu c·∫ßn
        signal: controller.signal,
      });

      clearTimeout(timeoutId);

      console.log('Register response status:', response.status);

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(errorText || 'ƒêƒÉng k√Ω th·∫•t b·∫°i');
      }

      const message = await response.text();
      console.log('Register successful');
      return message;
    } catch (error: any) {
      console.error('Register error:', error);
      if (error.name === 'AbortError') {
        throw new Error('Timeout - Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server');
      }
      throw error;
    }
  }

  // Test k·∫øt n·ªëi ƒë·∫øn server v·ªõi nhi·ªÅu IP kh√°c nhau
  async testConnection(): Promise<{ success: boolean; workingUrl?: string }> {
    try {
      console.log('Testing connection to:', API_BASE_URL);

      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 seconds timeout

      // Th·ª≠ g·ªçi login v·ªõi th√¥ng tin test ƒë·ªÉ ki·ªÉm tra server
      const response = await fetch(`${API_BASE_URL}/auth/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ username: 'test', password: 'test' }),
        signal: controller.signal,
      });

      clearTimeout(timeoutId);
      console.log(`${API_BASE_URL} response status:`, response.status);

      // Server ph·∫£n h·ªìi (d√π l√† l·ªói) nghƒ©a l√† k·∫øt n·ªëi th√†nh c√¥ng
      if (response.status === 400 || response.status === 401 || response.status === 200) {
        console.log('‚úÖ Connection successful to:', API_BASE_URL);
        return { success: true, workingUrl: API_BASE_URL };
      } else {
        console.log('‚ùå Unexpected response status:', response.status);
        return { success: false };
      }
    } catch (error: any) {
      console.log(`‚ùå ${API_BASE_URL} failed:`, error.message);
      return { success: false };
    }
  }

  // Gi·∫£i m√£ JWT token ƒë·ªÉ l·∫•y th√¥ng tin user (optional)
  decodeToken(token: string) {
    try {
      const payload = token.split('.')[1];
      const decodedPayload = JSON.parse(atob(payload));
      return decodedPayload;
    } catch (error) {
      console.error('Token decode error:', error);
      return null;
    }
  }

  // Parse v√† l∆∞u refresh token t·ª´ Set-Cookie header v√†o AsyncStorage
  async parseAndSaveCookies(setCookieHeader: string): Promise<void> {
    try {
      // Parse refresh_token t·ª´ Set-Cookie header
      const refreshTokenMatch = setCookieHeader.match(/refresh_token=([^;]+)/);
      if (refreshTokenMatch) {
        const refreshToken = refreshTokenMatch[1];
        console.log('üç™ Saving refresh_token to AsyncStorage:', refreshToken.substring(0, 20) + '...');

        await AsyncStorage.setItem('refresh_token', refreshToken);
      }
    } catch (error) {
      console.error('Error saving refresh token:', error);
    }
  }

  // L·∫•y refresh token t·ª´ AsyncStorage
  async getRefreshToken(): Promise<string | null> {
    try {
      return await AsyncStorage.getItem('refresh_token');
    } catch (error) {
      console.error('Error getting refresh token:', error);
      return null;
    }
  }
  async saveAccessToken(token: string): Promise<void> {
    try {
      await AsyncStorage.setItem('access_token', token);
    } catch (error) {
      console.error('Error saving access token:', error);
    }
  }

  // L·∫•y access token t·ª´ AsyncStorage
  async getAccessToken(): Promise<string | null> {
    try {
      return await AsyncStorage.getItem('access_token');
    } catch (error) {
      console.error('Error getting access token:', error);
      return null;
    }
  }

  // X√≥a access token
  async clearAccessToken(): Promise<void> {
    try {
      await AsyncStorage.removeItem('access_token');
    } catch (error) {
      console.error('Error clearing access token:', error);
    }
  }
  // L∆∞u user info v√†o AsyncStorage (cookies s·∫Ω ƒë∆∞·ª£c browser t·ª± ƒë·ªông qu·∫£n l√Ω)
  async saveUserInfo(user: any): Promise<void> {
    try {
      await AsyncStorage.setItem('user_data', JSON.stringify(user));
      console.log('User info saved to AsyncStorage');
    } catch (error) {
      console.error('Error saving user info:', error);
    }
  }

  // L·∫•y user info t·ª´ AsyncStorage
  async getUserInfo(): Promise<any | null> {
    try {
      const userData = await AsyncStorage.getItem('user_data');
      return userData ? JSON.parse(userData) : null;
    } catch (error) {
      console.error('Error getting user info:', error);
      return null;
    }
  }

  // Ki·ªÉm tra xem c√≥ session kh√¥ng (g·ªçi API /auth/refresh v·ªõi refresh token)
  async hasValidSession(): Promise<boolean> {
    try {
      console.log('üîç Checking session with refresh token...');

      const refreshToken = await this.getRefreshToken();
      if (!refreshToken) {
        console.log('‚ùå No refresh token found');
        return false;
      }

      const response = await fetch(`${API_BASE_URL}/auth/refresh`, {
        method: 'GET',
        headers: {
          'Cookie': `refresh_token=${refreshToken}`,
        },
        credentials: 'include',
      });

      console.log('üì° Refresh token check response status:', response.status);

      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ Valid session found, refreshed tokens');
        console.log('üîë New Access Token:', data.accessToken);

        // L∆∞u access token m·ªõi
        await this.saveAccessToken(data.accessToken);

        // L∆∞u refresh token m·ªõi n·∫øu c√≥
        const setCookieHeader = response.headers.get('set-cookie');
        if (setCookieHeader) {
          await this.parseAndSaveCookies(setCookieHeader);
        }

        return true;
      } else {
        const errorText = await response.text();
        console.log('‚ùå Invalid session. Status:', response.status, 'Error:', errorText);
        return false;
      }
    } catch (error) {
      console.error('üí• Error checking session:', error);
      return false;
    }
  }

  // X√≥a user info khi logout
  async clearUserInfo(): Promise<void> {
    try {
      await AsyncStorage.removeItem('user_data');
      await AsyncStorage.removeItem('refresh_token'); // X√≥a refresh token
      await this.clearAccessToken(); // X√≥a access token
      console.log('User info, refresh token and access token cleared');
    } catch (error) {
      console.error('Error clearing user info:', error);
    }
  }

  // G·ªçi API logout ƒë·ªÉ invalidate cookies tr√™n server
  async logout(): Promise<void> {
    try {
      // L·∫•y access token ƒë·ªÉ g·ª≠i trong header
      const accessToken = await this.getAccessToken();

      if (!accessToken) {
        console.warn('No access token found, still clearing local data');
        await this.clearUserInfo();
        return;
      }

      await fetch(`${API_BASE_URL}/auth/logout`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${accessToken}`,
        },
        credentials: 'include', // G·ª≠i cookies ƒë·ªÉ server c√≥ th·ªÉ invalidate
      });

      await this.clearUserInfo();
      console.log('Logout successful');
    } catch (error) {
      console.error('Logout error:', error);
      // V·∫´n x√≥a user info local d√π API call th·∫•t b·∫°i
      await this.clearUserInfo();
    }
  }

  // Qu√™n m·∫≠t kh·∫©u
  async forgotPassword(data: ForgotPasswordRequest): Promise<string> {
    try {
      console.log('Attempting forgot password to:', `${API_BASE_URL}/auth/forgot-password`);

      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 30000);

      const response = await fetch(`${API_BASE_URL}/auth/forgot-password`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
        credentials: 'include',
        signal: controller.signal,
      });

      clearTimeout(timeoutId);

      console.log('Forgot password response status:', response.status);

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(errorText || 'G·ª≠i y√™u c·∫ßu qu√™n m·∫≠t kh·∫©u th·∫•t b·∫°i');
      }

      const message = await response.text();
      console.log('Forgot password successful');
      return message;
    } catch (error: any) {
      console.error('Forgot password error:', error);
      if (error.name === 'AbortError') {
        throw new Error('Timeout - Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server');
      }
      throw error;
    }
  }

  // ƒê·ªïi m·∫≠t kh·∫©u
  async changePassword(data: ChangePasswordRequest): Promise<string> {
    try {
      console.log('Attempting change password to:', `${API_BASE_URL}/auth/change-password`);

      const accessToken = await this.getAccessToken();
      if (!accessToken) {
        throw new Error('Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c');
      }

      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 30000);

      const response = await fetch(`${API_BASE_URL}/auth/change-password`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${accessToken}`,
        },
        body: JSON.stringify({
          currentPassword: data.currentPassword,
          newPassword: data.newPassword,
          confirmPassword: data.confirmPassword,
        }),
        credentials: 'include',
        signal: controller.signal,
      });

      clearTimeout(timeoutId);

      console.log('Change password response status:', response.status);

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(errorText || 'ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i');
      }

      const message = await response.text();
      console.log('Change password successful');
      return message;
    } catch (error: any) {
      console.error('Change password error:', error);
      if (error.name === 'AbortError') {
        throw new Error('Timeout - Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server');
      }
      throw error;
    }
  }
}

export const authService = new AuthService();